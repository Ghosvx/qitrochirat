import os
import random
import time
from telethon.sync import TelegramClient, events
from telethon import events
from telethon.tl import functions
from telethon.tl.functions.photos import UploadProfilePhotoRequest
from datetime import datetime
import asyncio
import sys

session_name = 'selfdestruct'
config_file = 'config.cfg'

if os.path.exists(config_file):
    with open(config_file, 'r') as f:
        lines = f.read().splitlines()
    if len(lines) >= 2:
        api_id, api_hash = lines[:2]
    else:
        print("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–ª—è –Ω–∏–∂–µ.")
        print("üîé –ï—Å–ª–∏ –≤—ã –Ω–µ–∑–Ω–∞–µ—Ç–µ –≥–¥–µ –≤–∑—è—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ª—Å @ghosvx")
        api_id = input("–í–≤–µ–¥–∏—Ç–µ API ID: ")
        api_hash = input("–í–≤–µ–¥–∏—Ç–µ API Hash: ")
        with open(config_file, 'w') as f:
            f.write(api_id + '\n')
            f.write(api_hash + '\n')
        print("–ì–æ—Ç–æ–≤–æ! –≠—Ç–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–¥–æ –±—É–¥–µ—Ç –≤–≤–æ–¥–∏—Ç—å –≤ –±—É–¥—É—â–µ–º.")

client = TelegramClient(session_name, api_id, api_hash).start()

photo_path = 'ava.jpg'

me = client.get_me()

print("  _. o _|_ ._ _   _ |_  o ")
print(" (_| |  |_ | (_) (_ | | | ")
print("   |                     ")
print(" V0.01b1")
print("–ó–¥—Ä–∞—Å—Ç–≤—É–π—Ç–µ,", me.first_name, "!")
start_time = time.time()

@client.on(events.NewMessage(outgoing=True, pattern='Xping'))
async def ping_command(event):
    start_time = time.time()
    message = await event.respond('üöÄ –ü—Ä–æ–≤–µ—Ä—è—é –ø–∏–Ω–≥...')
    end_time = time.time()
    ping_time = (end_time - start_time) * 1000
    if ping_time < 152:
        emoji = 'üü¢'
    elif ping_time < 228:
        emoji = 'üü°'
    else:
        emoji = 'üî¥'
    ping_text = f'{emoji} –ü–∏–Ω–≥: `{ping_time:.2f}ms`'
    await message.edit(ping_text, parse_mode='markdown')

@client.on(events.NewMessage(outgoing=True, pattern='Xtime'))
async def time_command(event):
    args = event.message.message.split()[1:]
    if args:
        try:
            seconds = int(args[0])
            hours = seconds // 3600
            minutes = (seconds % 3600) // 60
            seconds = seconds % 60
            await event.message.edit(f'–í—Ä–µ–º—è: {hours} —á–∞—Å–æ–≤, {minutes} –º–∏–Ω—É—Ç, {seconds} —Å–µ–∫—É–Ω–¥')
        except ValueError:
            await event.message.edit('üö´ –û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç')
    else:
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        await event.message.edit(f'–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {current_time}')

ava_count = 0
last_ava_count = 0

async def set_profile_photo(photo):
    await client(functions.photos.UploadProfilePhotoRequest(
        file=await client.upload_file(photo)
    ))

async def get_self_avatar():
    chat = await client.get_entity('self')
    photos = await client.get_profile_photos(chat)
    if photos:
        photo = photos[0]
        file_path = await client.download_media(photo, 'ava.jpg')
        return file_path
    else:
        print("–ò—Ä–æ–¥ —É —Ç–µ–±—è –Ω–µ—Ç—É –∞–≤–∞—Ç–∞—Ä–∫–∏!")
        return None

async def update_message(event):
    global ava_count, last_ava_count
    while True:
        if ava_count != last_ava_count:
            await event.message.edit(f'‚ù§ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∞–≤–∞—Ç–∞—Ä–æ–∫: {ava_count}')
            last_ava_count = ava_count
        await asyncio.sleep(20)

@client.on(events.NewMessage(outgoing=True, pattern='Xava'))
async def ava_command(event):
    global ava_count
    message = await event.message.edit('ü©ª –û–∂–∏–¥–∞–π—Ç–µ —Å–∫–∞—á–∏–≤–∞–µ–º –≤–∞—à—É –∞–≤–∞—Ç–∞—Ä–∫—É... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏.')    
    await get_self_avatar()
    message = await event.message.edit('üî∂ –ù–∞—á–∏–Ω–∞—é —É—Å—Ç–∞–Ω–æ–≤–∫—É –∞–≤–∞—Ç–∞—Ä–æ–∫...')
    asyncio.create_task(update_message(event))
    while True:
        await set_profile_photo(photo_path)
        ava_count += 1
        print(f"–£—Å—Ç–∞–Ω–æ–≤–∏–ª {ava_count}-—É—é –∞–≤–∞—Ç–∞—Ä–∫—É!")
        await message.edit(f'‚ù§ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∞–≤–∞—Ç–∞—Ä–æ–∫: {ava_count}')
        await asyncio.sleep(3)
        await set_profile_photo(photo_path)
        ava_count += 1
        print(f"–£—Å—Ç–∞–Ω–æ–≤–∏–ª {ava_count}-—É—é –∞–≤–∞—Ç–∞—Ä–∫—É!")
        await message.edit(f'‚ù§ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∞–≤–∞—Ç–∞—Ä–æ–∫: {ava_count}')
        await asyncio.sleep(3)
        await set_profile_photo(photo_path)
        ava_count += 1        
        print(f"–£—Å—Ç–∞–Ω–æ–≤–∏–ª {ava_count}-—É—é –∞–≤–∞—Ç–∞—Ä–∫—É!")      
        await message.edit(f'‚ù§ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∞–≤–∞—Ç–∞—Ä–æ–∫: {ava_count}')
        await asyncio.sleep(3)
        await asyncio.sleep(random.randint(100, 260))

@client.on(events.NewMessage(outgoing=True, pattern='Xuptime'))
async def uptime_command(event):
    global start_time
    current_time = time.time()
    uptime_seconds = int(current_time - start_time)
    uptime_hours = uptime_seconds // 3600
    uptime_minutes = (uptime_seconds % 3600) // 60
    uptime_seconds = uptime_seconds % 60
    await event.message.edit(f'üíø –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞: {uptime_hours}:{uptime_minutes}:{uptime_seconds}')

@client.on(events.NewMessage(outgoing=True, pattern='Xinfo'))
async def info_command(event):
    info_text = f"""
üéÄ qitrochi
ü™ß –ü—Ä–µ—Ñ–∏–∫—Å <X>
üåê –í–µ—Ä—Å–∏—è 0.01

üòé –í–ª–∞–¥–µ–ª–µ—Ü @{me.username}
üßë‚Äçüíª –ê–≤—Ç–æ—Ä @ghosvx
    """
    await event.respond(info_text, parse_mode='markdown')

@client.on(events.NewMessage(outgoing=True, pattern='Xrestart'))
async def restart_command(event):
    await event.respond('üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é —Å–µ–ª—Ñ –±–æ—Ç–∞...')
    python = sys.executable
    os.execl(python, python, *sys.argv)

@client.on(events.NewMessage(outgoing=True, pattern='Xstop'))
async def shutdown_command(event):
    await event.respond('–ù–∞–¥–µ—é—Å—å –µ—â–µ —É–≤–∏–¥–∏–º—Å—è!')
    await client.disconnect()

@client.on(events.NewMessage(outgoing=True, pattern='Xhelp'))
async def help_command(event):
    help_text = """
üÜò –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:
- `Xping`: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∏–Ω–≥–∞.
- `Xtime [—Å–µ–∫—É–Ω–¥—ã]`: –í—ã–≤–æ–¥ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–∏, –ø—Ä–æ—à–µ–¥—à–µ–≥–æ —Å —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–µ–∫—É–Ω–¥.
- `Xava`: –ó–∞—Ü–∏–∫–ª–∏–≤–∞–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫—É –≤–∞—à–µ–π –∞–≤–∞—Ç–∞—Ä–∫–∏.
- `Xuptime`: –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞.
- `Xinfo`: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ –∏ –µ–≥–æ —Å–æ–∑–¥–∞—Ç–µ–ª–µ.
- `Xrestart`: –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞.
- `Xstop`: –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞.
    """
    await event.respond(help_text, parse_mode='markdown')

client.run_until_disconnected()
